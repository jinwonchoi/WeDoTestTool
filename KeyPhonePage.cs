using System;
using System.Data;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Text;
using System.Windows.Forms;

namespace Elegant.Ui.Samples.ControlsSample
{
	public partial class KeyPhonePage : SamplePageBase
	{
        public KeyPhonePage()
		{
			InitializeComponent();

            MainForm.SetMonospaceFont(EventLogTextBox);

            _customDrawingTimer = new Timer();
		    _customDrawingTimer.Interval = 50;
            _customDrawingTimer.Tick += CustomDrawingTimer_Tick;

		    AutoFillListBoxesWithItems();

		    _dataSet = new DataSet();

		    DataTable table = new DataTable("ElegantTable");
		    table.Columns.Add("Color");

            _dataSet.Tables.Add(table);

		    string[] names = Enum.GetNames(typeof(KnownColor));
		    foreach (string s in names)
            {
                table.Rows.Add(new object[] {s});
            }
        }

	    private void AutoFillListBoxesWithItems()
	    {
	        FillListBoxWithAutogeneratedItems("Elegant List Box Item Number ", DemoListBox);
	        FillListBoxWithAutogeneratedItems("Elegant Checked List Box Item Number ", DemoCheckedListBox);
	    }

	    private readonly DataSet _dataSet;

        private static void FillListBoxWithAutogeneratedItems(string prefixText, ListBox listBox)
        {
            listBox.BeginInit();

            listBox.Items.Clear();

            for (int i = 0; i < 300; i++)
            {
                listBox.Items.Add(prefixText + i);
            }
            listBox.EndInit();
        }

        private int _eventLogCounter;

        private void AddEventsLogMessage(string m)
        {
            _eventLogCounter++;
            string text = EventLogTextBox.Text + _eventLogCounter + " " + m + Environment.NewLine;

            int firstLineEnd = text.IndexOf(Environment.NewLine);
            if (firstLineEnd > 0)
            {
                int newLineCount = 0, currentLineIndex = firstLineEnd + Environment.NewLine.Length;
                while (currentLineIndex > 0)
                {
                    newLineCount += 1;
                    int startIndex = currentLineIndex + Environment.NewLine.Length;
                    if (startIndex >= text.Length - 1)
                        break;

                    currentLineIndex = text.IndexOf(Environment.NewLine, startIndex);
                }

                if (newLineCount == 100)
                {
                    text = text.Remove(0, firstLineEnd + Environment.NewLine.Length);
                }
            }


            EventLogTextBox.Text = text;
            EventLogTextBox.Select(EventLogTextBox.TextLength, 0);
            EventLogTextBox.ScrollToCaret();
        }

        private void UpdateListBoxSelectedItemIndicesTextBox()
        {
            int[] selectedItemIndices = DemoListBox.SelectedItemIndices;

            int length = selectedItemIndices.Length;

            const int maxDisplayedItemsCount = 40;
            if (length > maxDisplayedItemsCount)
                length = maxDisplayedItemsCount;

            StringBuilder sb = new StringBuilder();
            for (int index = 0; index < length; index++)
            {
                int i = selectedItemIndices[index];
                sb.Append(i + " ");
            }

            SelectedItemIndicesTextBox.Text = sb.ToString();
        }

        private void UpdateListBoxCheckedItemIndicesTextBox()
        {
            int[] checkedItemIndices = DemoCheckedListBox.CheckedItemIndices;

            int length = checkedItemIndices.Length;

            const int maxDisplayedItemsCount = 40;
            if (length > maxDisplayedItemsCount)
                length = maxDisplayedItemsCount;

            StringBuilder sb = new StringBuilder();
            for (int index = 0; index < length; index++)
            {
                int i = checkedItemIndices[index];
                sb.Append(i + " ");
            }

            CheckedItemIndicesTextBox.Text = sb.ToString();
        }

        private void DemoListBox_FormatItem(object sender, ListBoxFormatItemEventArgs e)
        {
            CustomFormatItem(e, DemoListBox);
        }

	    private static void CustomFormatItem(ListBoxFormatItemEventArgs e, ListBox listBox)
	    {
	        if(e.Value == null)
	            return;

	        StringBuilder sb = new StringBuilder();
	        string s = e.Value.ToString();

	        bool hovered = listBox.IsItemHovered(e.ItemIndex);

	        if(listBox.IsItemSelected(e.ItemIndex))
	        {
	            sb.AppendFormat("--> {0} <--", s);
	        }
	        else
	        {
                sb.Append(s.Replace(' ', hovered ? '-' : '_'));
	        }

	        e.Value = sb.ToString();
	    }

	    private void DemoListBox_DrawItem(object sender, ListBoxDrawItemEventArgs e)
        {
            CustomDrawItem(e);
        }

	    private void CustomDrawItem(ListBoxDrawItemEventArgs e)
	    {
	        double h = _customDrawingPosition / Convert.ToDouble(CustomDrawingPositionMaximum);
	        if(e.IsItemSelected)
	        {
	            h = Math.Abs(1.0 - h);
	        }
            
	        HSL backColor = new HSL(h,
	                                1,
	                                e.ItemIndex % 2 == 0 ? 0.5 : 0.6);
	        using(SolidBrush sb = new SolidBrush(backColor.ToRgb()))
	        {
	            e.Graphics.FillRectangle(sb, e.DrawingBounds);
	        }

	        HSL foreColor = new HSL(Math.Abs(1.0 - h),
	                                1,
	                                0.5);
	        using(SolidBrush sb = new SolidBrush(foreColor.ToRgb()))
	            e.Graphics.DrawString(DemoListBox.GetItemText(e.ItemIndex), DemoListBox.Font, sb, e.DrawingBounds);
	    }

	    private void DemoListBox_MeasureItem(object sender, ListBoxItemSizeEventArgs e)
        {

        }

        private void DemoListBox_SelectionChanged(object sender, EventArgs e)
        {
            AddEventsLogMessage("ListBox: Selection Changed");
            UpdateListBoxSelectedItemIndicesTextBox();
        }

        private void DemoCheckedListBox_DrawItem(object sender, ListBoxDrawItemEventArgs e)
        {
            CustomDrawItem(e);
        }

        private void DemoCheckedListBox_FormatItem(object sender, ListBoxFormatItemEventArgs e)
        {
            CustomFormatItem(e, DemoCheckedListBox);
        }

        private void DemoCheckedListBox_ItemCheckStateChanged(object sender, ListBoxItemEventArgs e)
        {
            AddEventsLogMessage("CheckedListBox: Item Check State Changed");

            UpdateListBoxCheckedItemIndicesTextBox();
        }

        private void DemoCheckedListBox_MeasureItem(object sender, ListBoxItemSizeEventArgs e)
        {

        }

        private void DemoCheckedListBox_SelectionChanged(object sender, EventArgs e)
        {
            AddEventsLogMessage("CheckedListBox: Selection Changed");
        }

	    private readonly Timer _customDrawingTimer;

        private void CustomDrawingTimer_Tick(object sender, EventArgs e)
        {
            if (++_customDrawingPosition > CustomDrawingPositionMaximum)
            {
                _customDrawingPosition = 0;
            }

            DemoListBox.Refresh();
            DemoCheckedListBox.Refresh();
        }

        private int _customDrawingPosition;

        private const int CustomDrawingPositionMaximum = 100;


        private void CustomDrawingCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if (CustomDrawingCheckBox.Checked)
            {
                _customDrawingPosition = 0;
                _customDrawingTimer.Start();

                DemoListBox.ItemDrawMode = ListBoxItemDrawMode.UserDefinedFixedHeight;
                DemoCheckedListBox.ItemDrawMode = ListBoxItemDrawMode.UserDefinedFixedHeight;
            }
            else
            {
                _customDrawingTimer.Stop();

                DemoListBox.ItemDrawMode = ListBoxItemDrawMode.Auto;
                DemoCheckedListBox.ItemDrawMode = ListBoxItemDrawMode.Auto;

                Refresh();
            }
        }

        private void MultiselectionCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            DemoListBox.MultipleSelection = DemoCheckedListBox.MultipleSelection =
                SelectAllButton.Enabled =
                    MultiselectionCheckBox.Checked;
        }

        private void CustomItemTextFormattingCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            DemoListBox.FormattingEnabled =
                DemoCheckedListBox.FormattingEnabled = CustomItemTextFormattingCheckBox.Checked;
        }

        private void BindToDataSetCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if(BindToDataSetCheckBox.Checked)
            {
                DemoListBox.DataSource = _dataSet;
                DemoListBox.DataMember = "ElegantTable";
                DemoListBox.DisplayMember = "Color";

                DemoCheckedListBox.DataSource = _dataSet;
                DemoCheckedListBox.DataMember = "ElegantTable";
                DemoCheckedListBox.DisplayMember = "Color";
            }
            else
            {
                DemoListBox.DataSource = null;
                DemoListBox.DataMember = null;
                DemoListBox.DisplayMember = null;

                DemoCheckedListBox.DataSource = null;
                DemoCheckedListBox.DataMember = null;
                DemoCheckedListBox.DisplayMember = null;

                AutoFillListBoxesWithItems();
            }
        }

        private void AllowIntermediateChecksCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            DemoCheckedListBox.AllowUserToSwitchToIndeterminateState = AllowIntermediateChecksCheckBox.Checked;
        }

        private void ClearSelectionButton_Click(object sender, EventArgs e)
        {
            DemoListBox.ClearSelection();
            DemoCheckedListBox.ClearSelection();
        }

        PopupTopMostForm topMostFrm;
        private void SelectAllButton_Click(object sender, EventArgs e)
        {
            //DemoListBox.SelectAllItems();
            //DemoCheckedListBox.SelectAllItems();
            if (!isTimerStarted)
            {
                timer1.Start();
                isTimerStarted = true;

            }
            else
            {
                timer1.Stop();
                isTimerStarted = false;
            }
        }
        int iTimer = 0;
        bool isTimerStarted = false;

        private void timer1_Tick(object sender, EventArgs e)
        {
            iTimer++;
            if (iTimer % 5 == 0)
            {
                if (topMostFrm == null)
                    topMostFrm = new PopupTopMostForm();
                topMostFrm.Activate();
                topMostFrm.Show();
            }
        }
	}
}